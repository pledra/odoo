# -*- coding: utf-8 -*-
from dateutil.relativedelta import relativedelta

from odoo import api, fields, models


class AccountRecurrentMixin(models.AbstractModel):
    _name = 'account.recurrent.mixin'

    is_recurrency_enabled = fields.Boolean(string="Generate Recurring Document",
        help="Enable if you want to generate recurring document as per defined interval.")
    recurrency_interval = fields.Integer(string='Recurrency', default=1)
    recurrency_type = fields.Selection([
        ('days', 'Day(s)'),
        ('weeks', 'Week(s)'),
        ('months', 'Month(s)'),
        ('years', 'Year(s)'),
    ], string="Recurrency Type", default='months')
    # Technical field depicting whether the document is generated by cron or by user
    is_recurring_document = fields.Boolean(string="Recurring Document")
    next_recurrency_date = fields.Date(compute="_compute_next_recurrency_date",
        string='Next Recurrency Date', copy=False, store=True)

    def _get_next_recurrency_date(self, document_date):
        """
        This method is used to return next date based on recurrency configuration of the record.

        :param document_date: Origin date from which next date is to be generated.
        :returns: future date on which a duplicated document will be generated by crons.
        """
        assert self.recurrency_type, "Invalid `Recurrency` interval! Please set it to either of these: 'Day(s)', 'Week(s)', 'Month(s)' or 'Year(s)'."
        interval = relativedelta(**{self.recurrency_type: self.recurrency_interval})
        return fields.Date.from_string(document_date) + interval

    @api.depends('is_recurrency_enabled', 'recurrency_interval', 'recurrency_type')
    def _compute_next_recurrency_date(self):
        for record in self:
            record.next_recurrency_date = False

    def _create_draft_record(self):
        """
        Models inheriting this model must override this method.
        """
        raise NotImplementedError('You need to override `_create_draft_record()` in %s model.' % self._name)

    def _cron_generate_recurring_document(self):
        domain = [
            ('is_recurrency_enabled', '=', True),
            ('next_recurrency_date', '<=', fields.Date.today())
        ]
        for record in self.search(domain):
            while record.next_recurrency_date <= fields.Date.today():
                record._create_draft_record()
                record.next_recurrency_date = record._get_next_recurrency_date(record.next_recurrency_date)
